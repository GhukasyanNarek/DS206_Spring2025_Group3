2025-05-17 21:50:08 | INFO | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | Starting ORDER_DDS pipeline...
2025-05-17 21:50:08 | INFO | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 21:50:08 | INFO | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | Connecting to master...
2025-05-17 21:50:09 | INFO | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | Executing SQL: SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 21:50:09 | INFO | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | Running validation query...
2025-05-17 21:50:09 | INFO | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | Validation passed.
2025-05-17 21:50:10 | INFO | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 21:50:10 | INFO | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | Connecting to ORDER_DDS...
2025-05-17 21:50:10 | INFO | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | Executing SQL: USE ORDER_DDS
2025-05-17 21:50:10 | INFO | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | Executing SQL: GO

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL'
2025-05-17 21:50:10 | ERROR | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | Execution failed: GO

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL'
Error: ('42000', "[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Could not find stored procedure 'GO'. (2812) (SQLExecDirectW)")
2025-05-17 21:50:10 | ERROR | aa69f832-8712-42bf-8af4-ba0dfb8e3e58 | Failed to create dimensional tables.
2025-05-17 21:56:31 | INFO | 0ada9d06-c941-42a7-837d-93794eb0a555 | Starting ORDER_DDS pipeline...
2025-05-17 21:56:31 | INFO | 0ada9d06-c941-42a7-837d-93794eb0a555 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 21:56:31 | INFO | 0ada9d06-c941-42a7-837d-93794eb0a555 | Connecting to master...
2025-05-17 21:56:31 | INFO | 0ada9d06-c941-42a7-837d-93794eb0a555 | Executing SQL: SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 21:56:32 | INFO | 0ada9d06-c941-42a7-837d-93794eb0a555 | Running validation query...
2025-05-17 21:56:32 | INFO | 0ada9d06-c941-42a7-837d-93794eb0a555 | Validation passed.
2025-05-17 21:56:32 | INFO | 0ada9d06-c941-42a7-837d-93794eb0a555 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 21:56:32 | INFO | 0ada9d06-c941-42a7-837d-93794eb0a555 | Connecting to ORDER_DDS...
2025-05-17 21:56:32 | INFO | 0ada9d06-c941-42a7-837d-93794eb0a555 | Executing SQL: USE ORDER_DDS
2025-05-17 21:56:32 | INFO | 0ada9d06-c941-42a7-837d-93794eb0a555 | Executing SQL: GO

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL'
2025-05-17 21:56:32 | ERROR | 0ada9d06-c941-42a7-837d-93794eb0a555 | Execution failed: GO

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL'
Error: ('42000', "[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Could not find stored procedure 'GO'. (2812) (SQLExecDirectW)")
2025-05-17 21:56:32 | ERROR | 0ada9d06-c941-42a7-837d-93794eb0a555 | Failed to create dimensional tables.
2025-05-17 22:12:17 | INFO | c0a0b496-e332-4f7b-a943-3ef700cd2295 | Starting ORDER_DDS pipeline...
2025-05-17 22:12:17 | INFO | c0a0b496-e332-4f7b-a943-3ef700cd2295 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 22:12:17 | INFO | c0a0b496-e332-4f7b-a943-3ef700cd2295 | Connecting to master...
2025-05-17 22:12:17 | INFO | c0a0b496-e332-4f7b-a943-3ef700cd2295 | Executing full SQL file...
2025-05-17 22:12:18 | INFO | c0a0b496-e332-4f7b-a943-3ef700cd2295 | Running validation query...
2025-05-17 22:12:18 | INFO | c0a0b496-e332-4f7b-a943-3ef700cd2295 | Validation passed.
2025-05-17 22:12:18 | INFO | c0a0b496-e332-4f7b-a943-3ef700cd2295 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 22:12:18 | INFO | c0a0b496-e332-4f7b-a943-3ef700cd2295 | Connecting to ORDER_DDS...
2025-05-17 22:12:18 | INFO | c0a0b496-e332-4f7b-a943-3ef700cd2295 | Executing full SQL file...
2025-05-17 22:12:18 | ERROR | c0a0b496-e332-4f7b-a943-3ef700cd2295 | Execution error: ('42000', "[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102) (SQLExecDirectW); [42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102)")
2025-05-17 22:12:18 | ERROR | c0a0b496-e332-4f7b-a943-3ef700cd2295 | Failed to create dimensional tables.
2025-05-17 22:18:09 | INFO | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | Starting ORDER_DDS pipeline...
2025-05-17 22:18:09 | INFO | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 22:18:09 | INFO | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | Connecting to master...
2025-05-17 22:18:09 | INFO | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | Executing full SQL file...
2025-05-17 22:18:09 | INFO | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | Running validation query...
2025-05-17 22:18:09 | INFO | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | Validation passed.
2025-05-17 22:18:09 | INFO | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 22:18:09 | INFO | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | Connecting to ORDER_DDS...
2025-05-17 22:18:09 | INFO | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | Executing full SQL file...
2025-05-17 22:18:09 | ERROR | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | Execution error: ('42000', "[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102) (SQLExecDirectW); [42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102)")
2025-05-17 22:18:09 | ERROR | ea133a47-aa3d-471d-b2cd-0dcf1f99b729 | Failed to create dimensional tables.
2025-05-17 22:26:20 | INFO | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | Starting ORDER_DDS pipeline...
2025-05-17 22:26:20 | INFO | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 22:26:20 | INFO | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | Connecting to master...
2025-05-17 22:26:20 | INFO | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | Executing full SQL file...
2025-05-17 22:26:21 | INFO | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | Running validation query...
2025-05-17 22:26:21 | INFO | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | Validation passed.
2025-05-17 22:26:21 | INFO | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 22:26:21 | INFO | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | Connecting to ORDER_DDS...
2025-05-17 22:26:21 | INFO | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | Executing full SQL file...
2025-05-17 22:26:21 | ERROR | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | Execution error: ('42000', "[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102) (SQLExecDirectW); [42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102)")
2025-05-17 22:26:21 | ERROR | df538bcb-a7ea-4fbf-93a9-88bd8b5add39 | Failed to create dimensional tables.
2025-05-17 22:36:45 | INFO | 30d41252-8fd6-42a4-85e9-80e5c494f97a | Starting ORDER_DDS pipeline...
2025-05-17 22:36:45 | INFO | 30d41252-8fd6-42a4-85e9-80e5c494f97a | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 22:36:45 | INFO | 30d41252-8fd6-42a4-85e9-80e5c494f97a | Connecting to master...
2025-05-17 22:36:45 | INFO | 30d41252-8fd6-42a4-85e9-80e5c494f97a | Executing full SQL file...
2025-05-17 22:36:46 | INFO | 30d41252-8fd6-42a4-85e9-80e5c494f97a | Running validation query...
2025-05-17 22:36:46 | INFO | 30d41252-8fd6-42a4-85e9-80e5c494f97a | Validation passed.
2025-05-17 22:36:46 | INFO | 30d41252-8fd6-42a4-85e9-80e5c494f97a | ORDER_DDS available. Creating dimensional tables...
2025-05-17 22:36:46 | INFO | 30d41252-8fd6-42a4-85e9-80e5c494f97a | Connecting to ORDER_DDS...
2025-05-17 22:36:46 | INFO | 30d41252-8fd6-42a4-85e9-80e5c494f97a | Executing full SQL file...
2025-05-17 22:36:46 | ERROR | 30d41252-8fd6-42a4-85e9-80e5c494f97a | Execution error: ('42000', "[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102) (SQLExecDirectW); [42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102)")
2025-05-17 22:36:46 | ERROR | 30d41252-8fd6-42a4-85e9-80e5c494f97a | Failed to create dimensional tables.
2025-05-17 22:43:25 | INFO | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | Starting ORDER_DDS pipeline...
2025-05-17 22:43:25 | INFO | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 22:43:25 | INFO | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | Connecting to master...
2025-05-17 22:43:25 | INFO | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | Executing full SQL file...
2025-05-17 22:43:25 | INFO | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | Running validation query...
2025-05-17 22:43:25 | INFO | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | Validation passed.
2025-05-17 22:43:25 | INFO | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | ORDER_DDS available. Creating dimensional tables...
2025-05-17 22:43:25 | INFO | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | Connecting to ORDER_DDS...
2025-05-17 22:43:25 | INFO | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | Executing full SQL file...
2025-05-17 22:43:26 | ERROR | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | Execution error: ('42000', "[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102) (SQLExecDirectW); [42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102)")
2025-05-17 22:43:26 | ERROR | b47cdd58-fcc5-494d-8dd2-a5040dff7efc | Failed to create dimensional tables.
2025-05-17 22:47:07 | INFO | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | Starting ORDER_DDS pipeline...
2025-05-17 22:47:07 | INFO | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 22:47:07 | INFO | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | Connecting to master...
2025-05-17 22:47:07 | INFO | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | Executing full SQL file...
2025-05-17 22:47:07 | INFO | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | Running validation query...
2025-05-17 22:47:07 | INFO | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | Validation passed.
2025-05-17 22:47:07 | INFO | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 22:47:07 | INFO | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | Connecting to ORDER_DDS...
2025-05-17 22:47:07 | INFO | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | Executing full SQL file...
2025-05-17 22:47:07 | ERROR | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | Execution error: ('42000', "[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102) (SQLExecDirectW); [42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near 'GO'. (102)")
2025-05-17 22:47:07 | ERROR | 15e7e909-b5aa-4ec4-971b-1790c8e46831 | Failed to create dimensional tables.
2025-05-17 23:00:39 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Starting ORDER_DDS pipeline...
2025-05-17 23:00:39 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 23:00:39 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Connecting to master...
2025-05-17 23:00:39 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing SQL batches...
2025-05-17 23:00:39 | DEBUG | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Running validation query...
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Validation passed.
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Connecting to ORDER_DDS...
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing SQL batches...
2025-05-17 23:00:40 | DEBUG | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | SQL file executed successfully.
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Schema setup complete.
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Pipeline is ready. Launching ETL flow...
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | ETL pipeline started.
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Connecting to ORDER_DDS...
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing SQL batches...
2025-05-17 23:00:40 | DEBUG | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-17 23:00:40 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | SQL file executed successfully.
2025-05-17 23:00:41 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging_Categories: 8 inserted, 0 skipped
2025-05-17 23:00:42 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging_Customers: 91 inserted, 0 skipped
2025-05-17 23:00:42 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-17 23:00:42 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging_Employees: 9 inserted, 0 skipped
2025-05-17 23:00:43 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging_Products: 77 inserted, 0 skipped
2025-05-17 23:00:43 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging_Shippers: 3 inserted, 0 skipped
2025-05-17 23:00:44 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging_Territories: 53 inserted, 0 skipped
2025-05-17 23:00:49 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging_Orders: 830 inserted, 0 skipped
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging_Region: 4 inserted, 0 skipped
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Staging load completed. Updating dimensions...
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Updated DimCategories_SCD1 successfully.
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Connecting to ORDER_DDS...
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing SQL batches...
2025-05-17 23:00:59 | DEBUG | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | SQL file executed successfully.
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Connecting to ORDER_DDS...
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing SQL batches...
2025-05-17 23:00:59 | DEBUG | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | SQL file executed successfully.
2025-05-17 23:00:59 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Connecting to ORDER_DDS...
2025-05-17 23:01:00 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing SQL batches...
2025-05-17 23:01:00 | DEBUG | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-17 23:01:00 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | SQL file executed successfully.
2025-05-17 23:01:00 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Connecting to ORDER_DDS...
2025-05-17 23:01:00 | INFO | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing SQL batches...
2025-05-17 23:01:00 | DEBUG | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_NK,
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_NK,
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);


MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-17 23:01:00 | ERROR | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'ProductID_NK'. (207) (SQLExecDirectW)")
2025-05-17 23:01:00 | ERROR | f144634b-d920-4ca2-9cf6-444f81a9aa57 | Aborting: update_dim_products failed.
2025-05-17 23:12:47 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Starting ORDER_DDS pipeline...
2025-05-17 23:12:47 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 23:12:47 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to master...
2025-05-17 23:12:47 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:12:47 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 23:12:47 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Running validation query...
2025-05-17 23:12:47 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Validation passed.
2025-05-17 23:12:47 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 23:12:47 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to ORDER_DDS...
2025-05-17 23:12:47 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:12:47 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-17 23:12:48 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | SQL file executed successfully.
2025-05-17 23:12:48 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Schema setup complete.
2025-05-17 23:12:48 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Pipeline is ready. Launching ETL flow...
2025-05-17 23:12:48 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | ETL pipeline started.
2025-05-17 23:12:48 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to ORDER_DDS...
2025-05-17 23:12:48 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:12:48 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-17 23:12:48 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | SQL file executed successfully.
2025-05-17 23:12:48 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging_Categories: 8 inserted, 0 skipped
2025-05-17 23:12:49 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging_Customers: 91 inserted, 0 skipped
2025-05-17 23:12:49 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-17 23:12:49 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging_Employees: 9 inserted, 0 skipped
2025-05-17 23:12:49 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging_Products: 77 inserted, 0 skipped
2025-05-17 23:12:50 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging_Shippers: 3 inserted, 0 skipped
2025-05-17 23:12:50 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging_Territories: 53 inserted, 0 skipped
2025-05-17 23:12:55 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging_Orders: 830 inserted, 0 skipped
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging_Region: 4 inserted, 0 skipped
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Staging load completed. Updating dimensions...
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Updated DimCategories_SCD1 successfully.
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to ORDER_DDS...
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:13:05 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | SQL file executed successfully.
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to ORDER_DDS...
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:13:05 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | SQL file executed successfully.
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to ORDER_DDS...
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:13:05 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | SQL file executed successfully.
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to ORDER_DDS...
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:13:05 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | SQL file executed successfully.
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to ORDER_DDS...
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:13:05 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | SQL file executed successfully.
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to ORDER_DDS...
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:13:05 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | SQL file executed successfully.
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to ORDER_DDS...
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:13:05 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | SQL file executed successfully.
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Dimension updates complete. Updating fact table...
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Connecting to ORDER_DDS...
2025-05-17 23:13:05 | INFO | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing SQL batches...
2025-05-17 23:13:05 | DEBUG | 8090fc55-8294-4e7b-9353-1336e54551f7 | Executing batch:
-- DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
-- DECLARE @SchemaName NVARCHAR(128) = 'dbo';
-- DECLARE @TableName NVARCHAR(128) = 'FactOrders';
-- DECLARE @start_date DATE = '2020-01-01';
-- DECLARE @end_date DATE = '2025-12-31';

-- USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_SK_PK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_SK_PK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-17 23:13:05 | ERROR | 8090fc55-8294-4e7b-9353-1336e54551f7 | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'CustomerID_SK_PK'. (207) (SQLExecDirectW)")
2025-05-17 23:13:05 | ERROR | 8090fc55-8294-4e7b-9353-1336e54551f7 | FactOrders update failed.
2025-05-17 23:13:05 | ERROR | 8090fc55-8294-4e7b-9353-1336e54551f7 | FactOrders update failed.
2025-05-17 23:18:22 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Starting ORDER_DDS pipeline...
2025-05-17 23:18:22 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 23:18:22 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to master...
2025-05-17 23:18:22 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:22 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Running validation query...
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Validation passed.
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to ORDER_DDS...
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:23 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | SQL file executed successfully.
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Schema setup complete.
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Pipeline is ready. Launching ETL flow...
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | ETL pipeline started.
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to ORDER_DDS...
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:23 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-17 23:18:23 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | SQL file executed successfully.
2025-05-17 23:18:24 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging_Categories: 8 inserted, 0 skipped
2025-05-17 23:18:24 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging_Customers: 91 inserted, 0 skipped
2025-05-17 23:18:25 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-17 23:18:25 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging_Employees: 9 inserted, 0 skipped
2025-05-17 23:18:25 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging_Products: 77 inserted, 0 skipped
2025-05-17 23:18:25 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging_Shippers: 3 inserted, 0 skipped
2025-05-17 23:18:26 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging_Territories: 53 inserted, 0 skipped
2025-05-17 23:18:31 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging_Orders: 830 inserted, 0 skipped
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging_Region: 4 inserted, 0 skipped
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Staging load completed. Updating dimensions...
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Updated DimCategories_SCD1 successfully.
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to ORDER_DDS...
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:41 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | SQL file executed successfully.
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to ORDER_DDS...
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:41 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | SQL file executed successfully.
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to ORDER_DDS...
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:41 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | SQL file executed successfully.
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to ORDER_DDS...
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:41 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | SQL file executed successfully.
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to ORDER_DDS...
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:41 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | SQL file executed successfully.
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to ORDER_DDS...
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:41 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | SQL file executed successfully.
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to ORDER_DDS...
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:41 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | SQL file executed successfully.
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Dimension updates complete. Updating fact table...
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Connecting to ORDER_DDS...
2025-05-17 23:18:41 | INFO | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing SQL batches...
2025-05-17 23:18:41 | DEBUG | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Executing batch:
-- DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
-- DECLARE @SchemaName NVARCHAR(128) = 'dbo';
-- DECLARE @TableName NVARCHAR(128) = 'FactOrders';
-- DECLARE @start_date DATE = '2020-01-01';
-- DECLARE @end_date DATE = '2025-12-31';

-- USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_SK_PK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_SK_PK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-17 23:18:41 | ERROR | 7d4429dc-33ba-4aea-87c6-883dc032e511 | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'CustomerID_SK_PK'. (207) (SQLExecDirectW)")
2025-05-17 23:18:41 | ERROR | 7d4429dc-33ba-4aea-87c6-883dc032e511 | FactOrders update failed.
2025-05-17 23:18:41 | ERROR | 7d4429dc-33ba-4aea-87c6-883dc032e511 | FactOrders update failed.
2025-05-17 23:22:53 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Starting ORDER_DDS pipeline...
2025-05-17 23:22:53 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 23:22:53 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to master...
2025-05-17 23:22:53 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:22:53 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 23:22:53 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Running validation query...
2025-05-17 23:22:53 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Validation passed.
2025-05-17 23:22:53 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 23:22:53 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to ORDER_DDS...
2025-05-17 23:22:53 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:22:53 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-17 23:22:54 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | SQL file executed successfully.
2025-05-17 23:22:54 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Schema setup complete.
2025-05-17 23:22:54 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Pipeline is ready. Launching ETL flow...
2025-05-17 23:22:54 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | ETL pipeline started.
2025-05-17 23:22:54 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to ORDER_DDS...
2025-05-17 23:22:54 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:22:54 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-17 23:22:54 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | SQL file executed successfully.
2025-05-17 23:22:54 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging_Categories: 8 inserted, 0 skipped
2025-05-17 23:22:55 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging_Customers: 91 inserted, 0 skipped
2025-05-17 23:22:55 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-17 23:22:55 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging_Employees: 9 inserted, 0 skipped
2025-05-17 23:22:56 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging_Products: 77 inserted, 0 skipped
2025-05-17 23:22:56 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging_Shippers: 3 inserted, 0 skipped
2025-05-17 23:22:56 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging_Territories: 53 inserted, 0 skipped
2025-05-17 23:23:02 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging_Orders: 830 inserted, 0 skipped
2025-05-17 23:23:11 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging_Region: 4 inserted, 0 skipped
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Staging load completed. Updating dimensions...
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Updated DimCategories_SCD1 successfully.
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to ORDER_DDS...
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:23:12 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | SQL file executed successfully.
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to ORDER_DDS...
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:23:12 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | SQL file executed successfully.
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to ORDER_DDS...
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:23:12 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | SQL file executed successfully.
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to ORDER_DDS...
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:23:12 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | SQL file executed successfully.
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to ORDER_DDS...
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:23:12 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | SQL file executed successfully.
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to ORDER_DDS...
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:23:12 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | SQL file executed successfully.
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to ORDER_DDS...
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:23:12 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | SQL file executed successfully.
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Dimension updates complete. Updating fact table...
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Connecting to ORDER_DDS...
2025-05-17 23:23:12 | INFO | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing SQL batches...
2025-05-17 23:23:12 | DEBUG | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Executing batch:
-- DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
-- DECLARE @SchemaName NVARCHAR(128) = 'dbo';
-- DECLARE @TableName NVARCHAR(128) = 'FactOrders';
-- DECLARE @start_date DATE = '2020-01-01';
-- DECLARE @end_date DATE = '2025-12-31';

-- USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_SK_PK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_SK_PK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-17 23:23:12 | ERROR | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'CustomerID_SK_PK'. (207) (SQLExecDirectW)")
2025-05-17 23:23:12 | ERROR | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | FactOrders update failed.
2025-05-17 23:23:12 | ERROR | 7de64778-103b-467c-ab6d-2e3e1400f2b6 | FactOrders update failed.
2025-05-17 23:27:17 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Starting ORDER_DDS pipeline...
2025-05-17 23:27:17 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 23:27:17 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to master...
2025-05-17 23:27:17 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:17 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Running validation query...
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Validation passed.
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | ORDER_DDS available. Creating dimensional tables...
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to ORDER_DDS...
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:18 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | SQL file executed successfully.
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Schema setup complete.
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Pipeline is ready. Launching ETL flow...
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | ETL pipeline started.
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to ORDER_DDS...
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:18 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-17 23:27:18 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | SQL file executed successfully.
2025-05-17 23:27:19 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging_Categories: 8 inserted, 0 skipped
2025-05-17 23:27:19 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging_Customers: 91 inserted, 0 skipped
2025-05-17 23:27:19 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-17 23:27:19 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging_Employees: 9 inserted, 0 skipped
2025-05-17 23:27:20 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging_Products: 77 inserted, 0 skipped
2025-05-17 23:27:20 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging_Shippers: 3 inserted, 0 skipped
2025-05-17 23:27:20 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging_Territories: 53 inserted, 0 skipped
2025-05-17 23:27:26 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging_Orders: 830 inserted, 0 skipped
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging_Region: 4 inserted, 0 skipped
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Staging load completed. Updating dimensions...
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Updated DimCategories_SCD1 successfully.
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to ORDER_DDS...
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:36 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | SQL file executed successfully.
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to ORDER_DDS...
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:36 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | SQL file executed successfully.
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to ORDER_DDS...
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:36 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | SQL file executed successfully.
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to ORDER_DDS...
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:36 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | SQL file executed successfully.
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to ORDER_DDS...
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:36 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | SQL file executed successfully.
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to ORDER_DDS...
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:36 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | SQL file executed successfully.
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to ORDER_DDS...
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:36 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | SQL file executed successfully.
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Dimension updates complete. Updating fact table...
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Connecting to ORDER_DDS...
2025-05-17 23:27:36 | INFO | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing SQL batches...
2025-05-17 23:27:36 | DEBUG | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Executing batch:
-- DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
-- DECLARE @SchemaName NVARCHAR(128) = 'dbo';
-- DECLARE @TableName NVARCHAR(128) = 'FactOrders';
-- DECLARE @start_date DATE = '2020-01-01';
-- DECLARE @end_date DATE = '2025-12-31';

-- USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_SK_PK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_SK_PK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-17 23:27:36 | ERROR | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'CustomerID_SK_PK'. (207) (SQLExecDirectW)")
2025-05-17 23:27:36 | ERROR | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | FactOrders update failed.
2025-05-17 23:27:36 | ERROR | f4c12a1b-14b3-499f-b3be-e027fadf7d2c | FactOrders update failed.
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Starting ORDER_DDS pipeline...
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to master...
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:33 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Running validation query...
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Validation passed.
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to ORDER_DDS...
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:33 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | SQL file executed successfully.
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Schema setup complete.
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Pipeline is ready. Launching ETL flow...
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | ETL pipeline started.
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to ORDER_DDS...
2025-05-17 23:30:33 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:33 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-17 23:30:34 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | SQL file executed successfully.
2025-05-17 23:30:34 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging_Categories: 8 inserted, 0 skipped
2025-05-17 23:30:35 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging_Customers: 91 inserted, 0 skipped
2025-05-17 23:30:35 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-17 23:30:35 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging_Employees: 9 inserted, 0 skipped
2025-05-17 23:30:35 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging_Products: 77 inserted, 0 skipped
2025-05-17 23:30:35 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging_Shippers: 3 inserted, 0 skipped
2025-05-17 23:30:36 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging_Territories: 53 inserted, 0 skipped
2025-05-17 23:30:41 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging_Orders: 830 inserted, 0 skipped
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging_Region: 4 inserted, 0 skipped
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Staging load completed. Updating dimensions...
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Updated DimCategories_SCD1 successfully.
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to ORDER_DDS...
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:51 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | SQL file executed successfully.
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to ORDER_DDS...
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:51 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | SQL file executed successfully.
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to ORDER_DDS...
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:51 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | SQL file executed successfully.
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to ORDER_DDS...
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:51 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | SQL file executed successfully.
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to ORDER_DDS...
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:51 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | SQL file executed successfully.
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to ORDER_DDS...
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:51 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | SQL file executed successfully.
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to ORDER_DDS...
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:51 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | SQL file executed successfully.
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Dimension updates complete. Updating fact table...
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Connecting to ORDER_DDS...
2025-05-17 23:30:51 | INFO | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing SQL batches...
2025-05-17 23:30:51 | DEBUG | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Executing batch:
-- DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
-- DECLARE @SchemaName NVARCHAR(128) = 'dbo';
-- DECLARE @TableName NVARCHAR(128) = 'FactOrders';
-- DECLARE @start_date DATE = '2020-01-01';
-- DECLARE @end_date DATE = '2025-12-31';

-- USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_SK_PK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_SK_PK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-17 23:30:51 | ERROR | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'CustomerID_SK_PK'. (207) (SQLExecDirectW)")
2025-05-17 23:30:51 | ERROR | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | FactOrders update failed.
2025-05-17 23:30:51 | ERROR | c29f0f20-ccaf-41a2-86bb-7e16b8947ef3 | FactOrders update failed.
2025-05-17 23:33:57 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Starting ORDER_DDS pipeline...
2025-05-17 23:33:57 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 23:33:57 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to master...
2025-05-17 23:33:57 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:33:57 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 23:33:57 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Running validation query...
2025-05-17 23:33:57 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Validation passed.
2025-05-17 23:33:57 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | ORDER_DDS available. Creating dimensional tables...
2025-05-17 23:33:57 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to ORDER_DDS...
2025-05-17 23:33:57 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:33:57 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-17 23:33:58 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | SQL file executed successfully.
2025-05-17 23:33:58 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Schema setup complete.
2025-05-17 23:33:58 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Pipeline is ready. Launching ETL flow...
2025-05-17 23:33:58 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | ETL pipeline started.
2025-05-17 23:33:58 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to ORDER_DDS...
2025-05-17 23:33:58 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:33:58 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-17 23:33:58 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | SQL file executed successfully.
2025-05-17 23:33:58 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging_Categories: 8 inserted, 0 skipped
2025-05-17 23:33:59 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging_Customers: 91 inserted, 0 skipped
2025-05-17 23:33:59 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-17 23:33:59 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging_Employees: 9 inserted, 0 skipped
2025-05-17 23:33:59 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging_Products: 77 inserted, 0 skipped
2025-05-17 23:34:00 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging_Shippers: 3 inserted, 0 skipped
2025-05-17 23:34:00 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging_Territories: 53 inserted, 0 skipped
2025-05-17 23:34:05 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging_Orders: 830 inserted, 0 skipped
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging_Region: 4 inserted, 0 skipped
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Staging load completed. Updating dimensions...
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Updated DimCategories_SCD1 successfully.
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to ORDER_DDS...
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:34:15 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | SQL file executed successfully.
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to ORDER_DDS...
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:34:15 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | SQL file executed successfully.
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to ORDER_DDS...
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:34:15 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | SQL file executed successfully.
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to ORDER_DDS...
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:34:15 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | SQL file executed successfully.
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to ORDER_DDS...
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:34:15 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | SQL file executed successfully.
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to ORDER_DDS...
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:34:15 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | SQL file executed successfully.
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to ORDER_DDS...
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:34:15 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | SQL file executed successfully.
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Dimension updates complete. Updating fact table...
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Connecting to ORDER_DDS...
2025-05-17 23:34:15 | INFO | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing SQL batches...
2025-05-17 23:34:15 | DEBUG | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Executing batch:
-- DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
-- DECLARE @SchemaName NVARCHAR(128) = 'dbo';
-- DECLARE @TableName NVARCHAR(128) = 'FactOrders';
-- DECLARE @start_date DATE = '2020-01-01';
-- DECLARE @end_date DATE = '2025-12-31';

-- USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_SK_PK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_SK_PK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-17 23:34:15 | ERROR | d17c5c34-2078-4747-8f05-c81a0b5dc922 | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'CustomerID_SK_PK'. (207) (SQLExecDirectW)")
2025-05-17 23:34:15 | ERROR | d17c5c34-2078-4747-8f05-c81a0b5dc922 | FactOrders update failed.
2025-05-17 23:34:15 | ERROR | d17c5c34-2078-4747-8f05-c81a0b5dc922 | FactOrders update failed.
2025-05-17 23:39:43 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Starting ORDER_DDS pipeline...
2025-05-17 23:39:43 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 23:39:43 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to master...
2025-05-17 23:39:43 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:39:43 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Running validation query...
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Validation passed.
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | ORDER_DDS available. Creating dimensional tables...
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to ORDER_DDS...
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:39:44 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | SQL file executed successfully.
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Schema setup complete.
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Pipeline is ready. Launching ETL flow...
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | ETL pipeline started.
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to ORDER_DDS...
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:39:44 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-17 23:39:44 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | SQL file executed successfully.
2025-05-17 23:39:45 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging_Categories: 8 inserted, 0 skipped
2025-05-17 23:39:45 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging_Customers: 91 inserted, 0 skipped
2025-05-17 23:39:45 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-17 23:39:45 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging_Employees: 9 inserted, 0 skipped
2025-05-17 23:39:46 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging_Products: 77 inserted, 0 skipped
2025-05-17 23:39:46 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging_Shippers: 3 inserted, 0 skipped
2025-05-17 23:39:46 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging_Territories: 53 inserted, 0 skipped
2025-05-17 23:39:52 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging_Orders: 830 inserted, 0 skipped
2025-05-17 23:40:01 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging_Region: 4 inserted, 0 skipped
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Staging load completed. Updating dimensions...
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Updated DimCategories_SCD1 successfully.
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to ORDER_DDS...
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:40:02 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | SQL file executed successfully.
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to ORDER_DDS...
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:40:02 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | SQL file executed successfully.
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to ORDER_DDS...
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:40:02 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | SQL file executed successfully.
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to ORDER_DDS...
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:40:02 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | SQL file executed successfully.
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to ORDER_DDS...
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:40:02 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | SQL file executed successfully.
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to ORDER_DDS...
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:40:02 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | SQL file executed successfully.
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to ORDER_DDS...
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:40:02 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | SQL file executed successfully.
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Dimension updates complete. Updating fact table...
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Connecting to ORDER_DDS...
2025-05-17 23:40:02 | INFO | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing SQL batches...
2025-05-17 23:40:02 | DEBUG | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Executing batch:
-- DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
-- DECLARE @SchemaName NVARCHAR(128) = 'dbo';
-- DECLARE @TableName NVARCHAR(128) = 'FactOrders';
-- DECLARE @start_date DATE = '2020-01-01';
-- DECLARE @end_date DATE = '2025-12-31';

-- USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_SK_PK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_SK_PK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-17 23:40:02 | ERROR | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'CustomerID_SK_PK'. (207) (SQLExecDirectW)")
2025-05-17 23:40:02 | ERROR | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | FactOrders update failed.
2025-05-17 23:40:02 | ERROR | 6c4e5fce-1e5c-412f-a6cf-70141cbaac8c | FactOrders update failed.
2025-05-17 23:44:08 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Starting ORDER_DDS pipeline...
2025-05-17 23:44:08 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 23:44:08 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to master...
2025-05-17 23:44:08 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:08 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 23:44:08 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Running validation query...
2025-05-17 23:44:08 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Validation passed.
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | ORDER_DDS available. Creating dimensional tables...
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to ORDER_DDS...
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:09 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | SQL file executed successfully.
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Schema setup complete.
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Pipeline is ready. Launching ETL flow...
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | ETL pipeline started.
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to ORDER_DDS...
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:09 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | SQL file executed successfully.
2025-05-17 23:44:09 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging_Categories: 8 inserted, 0 skipped
2025-05-17 23:44:10 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging_Customers: 91 inserted, 0 skipped
2025-05-17 23:44:10 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-17 23:44:10 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging_Employees: 9 inserted, 0 skipped
2025-05-17 23:44:11 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging_Products: 77 inserted, 0 skipped
2025-05-17 23:44:11 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging_Shippers: 3 inserted, 0 skipped
2025-05-17 23:44:11 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging_Territories: 53 inserted, 0 skipped
2025-05-17 23:44:16 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging_Orders: 830 inserted, 0 skipped
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging_Region: 4 inserted, 0 skipped
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Staging load completed. Updating dimensions...
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Updated DimCategories_SCD1 successfully.
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to ORDER_DDS...
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:26 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | SQL file executed successfully.
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to ORDER_DDS...
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:26 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | SQL file executed successfully.
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to ORDER_DDS...
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:26 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | SQL file executed successfully.
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to ORDER_DDS...
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:26 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | SQL file executed successfully.
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to ORDER_DDS...
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:26 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | SQL file executed successfully.
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to ORDER_DDS...
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:26 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | SQL file executed successfully.
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to ORDER_DDS...
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:26 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | SQL file executed successfully.
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Dimension updates complete. Updating fact table...
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Connecting to ORDER_DDS...
2025-05-17 23:44:26 | INFO | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing SQL batches...
2025-05-17 23:44:26 | DEBUG | ce8a7757-13fc-4704-84c2-69ba575f609f | Executing batch:
-- DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
-- DECLARE @SchemaName NVARCHAR(128) = 'dbo';
-- DECLARE @TableName NVARCHAR(128) = 'FactOrders';
-- DECLARE @start_date DATE = '2020-01-01';
-- DECLARE @end_date DATE = '2025-12-31';

-- USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_SK_PK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_Table_SK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-17 23:44:26 | ERROR | ce8a7757-13fc-4704-84c2-69ba575f609f | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'CustomerID_Table_SK'. (207) (SQLExecDirectW)")
2025-05-17 23:44:26 | ERROR | ce8a7757-13fc-4704-84c2-69ba575f609f | FactOrders update failed.
2025-05-17 23:44:26 | ERROR | ce8a7757-13fc-4704-84c2-69ba575f609f | FactOrders update failed.
2025-05-17 23:47:07 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Starting ORDER_DDS pipeline...
2025-05-17 23:47:07 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-17 23:47:07 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to master...
2025-05-17 23:47:07 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:07 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Running validation query...
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Validation passed.
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | ORDER_DDS available. Creating dimensional tables...
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to ORDER_DDS...
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:08 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | SQL file executed successfully.
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Schema setup complete.
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Pipeline is ready. Launching ETL flow...
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | ETL pipeline started.
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to ORDER_DDS...
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:08 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | SQL file executed successfully.
2025-05-17 23:47:08 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging_Categories: 8 inserted, 0 skipped
2025-05-17 23:47:09 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging_Customers: 91 inserted, 0 skipped
2025-05-17 23:47:09 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-17 23:47:09 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging_Employees: 9 inserted, 0 skipped
2025-05-17 23:47:10 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging_Products: 77 inserted, 0 skipped
2025-05-17 23:47:10 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging_Shippers: 3 inserted, 0 skipped
2025-05-17 23:47:10 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging_Territories: 53 inserted, 0 skipped
2025-05-17 23:47:16 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging_Orders: 830 inserted, 0 skipped
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging_Region: 4 inserted, 0 skipped
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Staging load completed. Updating dimensions...
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Updated DimCategories_SCD1 successfully.
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to ORDER_DDS...
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:26 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | SQL file executed successfully.
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to ORDER_DDS...
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:26 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | SQL file executed successfully.
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to ORDER_DDS...
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:26 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | SQL file executed successfully.
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to ORDER_DDS...
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:26 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | SQL file executed successfully.
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to ORDER_DDS...
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:26 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | SQL file executed successfully.
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to ORDER_DDS...
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:26 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | SQL file executed successfully.
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to ORDER_DDS...
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:26 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | SQL file executed successfully.
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Dimension updates complete. Updating fact table...
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Connecting to ORDER_DDS...
2025-05-17 23:47:26 | INFO | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing SQL batches...
2025-05-17 23:47:26 | DEBUG | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Executing batch:
-- DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
-- DECLARE @SchemaName NVARCHAR(128) = 'dbo';
-- DECLARE @TableName NVARCHAR(128) = 'FactOrders';
-- DECLARE @start_date DATE = '2020-01-01';
-- DECLARE @end_date DATE = '2025-12-31';

-- USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_Table_SK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_Table_SK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-17 23:47:26 | ERROR | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'CustomerID_Table_SK'. (207) (SQLExecDirectW)")
2025-05-17 23:47:26 | ERROR | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | FactOrders update failed.
2025-05-17 23:47:26 | ERROR | 003ce6a9-a2ff-45d5-b7c5-cb4bbc88f69e | FactOrders update failed.
2025-05-18 00:00:51 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Starting ORDER_DDS pipeline...
2025-05-18 00:00:51 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-18 00:00:51 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to master...
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:00:52 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Running validation query...
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Validation passed.
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | ORDER_DDS available. Creating dimensional tables...
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to ORDER_DDS...
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:00:52 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK, ProductID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | SQL file executed successfully.
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Schema setup complete.
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Pipeline is ready. Launching ETL flow...
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | ETL pipeline started.
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to ORDER_DDS...
2025-05-18 00:00:52 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:00:52 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-18 00:00:53 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | SQL file executed successfully.
2025-05-18 00:00:53 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging_Categories: 8 inserted, 0 skipped
2025-05-18 00:00:54 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging_Customers: 91 inserted, 0 skipped
2025-05-18 00:00:54 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-18 00:00:54 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging_Employees: 9 inserted, 0 skipped
2025-05-18 00:00:54 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging_Products: 77 inserted, 0 skipped
2025-05-18 00:00:55 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging_Shippers: 3 inserted, 0 skipped
2025-05-18 00:00:55 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging_Territories: 53 inserted, 0 skipped
2025-05-18 00:01:00 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging_Orders: 830 inserted, 0 skipped
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging_Region: 4 inserted, 0 skipped
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Staging load completed. Updating dimensions...
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Updated DimCategories_SCD1 successfully.
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to ORDER_DDS...
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:01:10 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | SQL file executed successfully.
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to ORDER_DDS...
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:01:10 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | SQL file executed successfully.
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to ORDER_DDS...
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:01:10 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | SQL file executed successfully.
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to ORDER_DDS...
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:01:10 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | SQL file executed successfully.
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to ORDER_DDS...
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:01:10 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | SQL file executed successfully.
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to ORDER_DDS...
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:01:10 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | SQL file executed successfully.
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to ORDER_DDS...
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:01:10 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | SQL file executed successfully.
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Dimension updates complete. Updating fact table...
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Connecting to ORDER_DDS...
2025-05-18 00:01:10 | INFO | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing SQL batches...
2025-05-18 00:01:10 | DEBUG | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Executing batch:
-- DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
-- DECLARE @SchemaName NVARCHAR(128) = 'dbo';
-- DECLARE @TableName NVARCHAR(128) = 'FactOrders';
-- DECLARE @start_date DATE = '2020-01-01';
-- DECLARE @end_date DATE = '2025-12-31';

-- USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_Table_SK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_Table_SK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-18 00:01:10 | ERROR | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | Execution error: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'CustomerID_Table_SK'. (207) (SQLExecDirectW)")
2025-05-18 00:01:10 | ERROR | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | FactOrders update failed.
2025-05-18 00:01:10 | ERROR | 55ab5942-4470-4f96-a0ca-3b557f02d2f5 | FactOrders update failed.
2025-05-18 00:16:27 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Starting ORDER_DDS pipeline...
2025-05-18 00:16:27 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | --reset flag passed. Recreating ORDER_DDS and all tables...
2025-05-18 00:16:27 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to master...
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:28 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
SELECT name FROM sys.databases WHERE name = 'ORDER_DDS'


ALTER DATABASE ORDER_DDS SET SINGLE_USER WITH ROLLBACK IMMEDIATE
DROP DATABASE ORDER_DDS


CREATE DATABASE ORDER_DDS
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Running validation query...
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Validation passed.
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | ORDER_DDS available. Creating dimensional tables...
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to ORDER_DDS...
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:28 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
USE ORDER_DDS;

EXEC sp_MSforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL';

DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) 
            + ' DROP CONSTRAINT ' + QUOTENAME(name) + '; '
FROM sys.foreign_keys;
EXEC sp_executesql @sql;

EXEC sp_MSforeachtable 'DROP TABLE ?';

USE ORDER_DDS;

-- Dim_SOR
CREATE TABLE dbo.Dim_SOR (
    SORKey INT IDENTITY(1,1) PRIMARY KEY,
    StagingTableName NVARCHAR(255) NOT NULL,
    TablePrimaryKeyColumn NVARCHAR(255) NOT NULL
);

-- DimCategories_SCD1
CREATE TABLE dbo.DimCategories_SCD1 (
    CategoryID_SK_PK INT IDENTITY(1,1) NOT NULL,
    CategoryID_NK INT NOT NULL,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Categories_SCD1 PRIMARY KEY (CategoryID_SK_PK)
);

-- DimSuppliers_SCD4
CREATE TABLE dbo.DimSuppliers_SCD4 (
    SupplierID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT NOT NULL UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    LastUpdated DATE NULL
);

-- DimProducts_SCD4
CREATE TABLE dbo.DimProducts_SCD4 (
    ProductID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_NK INT NOT NULL,
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT FOREIGN KEY REFERENCES dbo.DimSuppliers_SCD4(SupplierID_SK_PK),
    CategoryID INT FOREIGN KEY REFERENCES dbo.DimCategories_SCD1(CategoryID_SK_PK),
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    LastUpdated DATE NULL
);

-- DimProducts_History
CREATE TABLE dbo.DimProducts_History (
    ProductID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    ProductID_SK_FK INT FOREIGN KEY REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    ProductID_DURABLE_SK NVARCHAR(10) UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    ValidFrom DATE NULL,
    EndDate DATE
);

-- DimCustomers_SCD2
CREATE TABLE dbo.DimCustomers_SCD2 (
    CustomerID_SK_PK INT IDENTITY(1,1) NOT NULL,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    CustomerID_DURABLE_SK NVARCHAR(5) UNIQUE,
    CustomerID_NK NVARCHAR(5),
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    ValidFrom DATE NULL,
    ValidTo DATE NULL,
    IsCurrent BIT NULL,
    CONSTRAINT PK_Customers_SCD2 PRIMARY KEY (CustomerID_SK_PK)
);

-- DimEmployees_SCD1
CREATE TABLE dbo.DimEmployees_SCD1 (
    EmployeeID_SK_PK INT IDENTITY(1,1) NOT NULL,
    EmployeeID_NK INT NOT NULL,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Photo VARBINARY(MAX),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    IsDeleted BIT DEFAULT 0,                    
    ValidFrom DATE NULL,        
    CONSTRAINT PK_Employees_SCD1 PRIMARY KEY (EmployeeID_SK_PK)
);

-- DimRegion_SCD1
CREATE TABLE dbo.DimRegion_SCD1 (
    RegionID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    RegionID_NK INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);

-- DimShippers_SCD3
CREATE TABLE dbo.DimShippers_SCD3 (
    ShipperID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID_NK INT NOT NULL UNIQUE,
    CompanyName_Current NVARCHAR(255),
    Phone_Current NVARCHAR(50),
    CompanyName_Prior NVARCHAR(255),
    Phone_Prior NVARCHAR(50),
    LastUpdated DATE NULL
);

-- DimSuppliers_History
CREATE TABLE dbo.DimSuppliers_History (
    SupplierID_History_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    SORKey INT FOREIGN KEY REFERENCES dbo.Dim_SOR(SORKey),
    SupplierID_NK INT,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(50),
    Fax NVARCHAR(50),
    HomePage NVARCHAR(MAX),
    ValidFrom DATE,
    EndDate DATE
);

-- DimTerritories_SCD3
CREATE TABLE dbo.DimTerritories_SCD3 (
    TerritoryID_SK_PK INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID_NK NVARCHAR(20) NOT NULL UNIQUE,
    TerritoryDescription_Current NVARCHAR(255),
    RegionID_Current INT,
    TerritoryDescription_Prior NVARCHAR(255),
    RegionID_Prior INT,
    LastUpdated DATE NULL
);

-- FactOrders
CREATE TABLE dbo.FactOrders (
    OrderID_FK INT,
    ProductID_FK INT,
    CustomerID_FK INT,
    EmployeeID_FK INT,
    ShipperID_FK INT,
    TerritoryID_FK INT,
    OrderDate DATE,
    RequiredDate DATE,
    ShippedDate DATE,
    Freight DECIMAL(10,2),
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    Discount FLOAT,
    CONSTRAINT PK_FactOrders PRIMARY KEY (OrderID_FK, ProductID_FK),
    FOREIGN KEY (TerritoryID_FK) REFERENCES dbo.DimTerritories_SCD3(TerritoryID_SK_PK),
    FOREIGN KEY (CustomerID_FK) REFERENCES dbo.DimCustomers_SCD2(CustomerID_SK_PK),
    FOREIGN KEY (ProductID_FK) REFERENCES dbo.DimProducts_SCD4(ProductID_SK_PK),
    FOREIGN KEY (EmployeeID_FK) REFERENCES dbo.DimEmployees_SCD1(EmployeeID_SK_PK),
    FOREIGN KEY (ShipperID_FK) REFERENCES dbo.DimShippers_SCD3(ShipperID_SK_PK)
);

-- FactOrders Error
CREATE TABLE dbo.FactOrders_Error (
    FactOrderErrorID_PK INT IDENTITY(1,1) PRIMARY KEY,
    OrderID_FK INT NOT NULL,
    MissingKeyType NVARCHAR(50) NOT NULL,
    StagingRawID INT NOT NULL,
    OrderDate DATETIME,
    ShipDate DATETIME,
    Quantity SMALLINT,
    TotalAmount DECIMAL(18,2)
);
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | SQL file executed successfully.
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Schema setup complete.
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Pipeline is ready. Launching ETL flow...
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | ETL pipeline started.
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to ORDER_DDS...
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:28 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
-- Categories Table
CREATE TABLE dbo.Staging_Categories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CategoryID INT UNIQUE,
    CategoryName NVARCHAR(255),
    Description NVARCHAR(MAX)
);

-- Customers Table
CREATE TABLE dbo.Staging_Customers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID NVARCHAR(5) UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255)
);

-- Shippers Table
CREATE TABLE dbo.Staging_Shippers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ShipperID INT UNIQUE,
    CompanyName NVARCHAR(255),
    Phone NVARCHAR(255)
);

-- Suppliers Table
CREATE TABLE dbo.Staging_Suppliers (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    SupplierID INT UNIQUE,
    CompanyName NVARCHAR(255),
    ContactName NVARCHAR(255),
    ContactTitle NVARCHAR(255),
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    Phone NVARCHAR(255),
    Fax NVARCHAR(255),
    HomePage NVARCHAR(MAX)
);

-- Territories Table
CREATE TABLE dbo.Staging_Territories (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    TerritoryID NVARCHAR(20) UNIQUE,
    TerritoryDescription NVARCHAR(255),
    TerritoryCode NVARCHAR(5),  --na vsyaki 5)
    RegionID INT
);

-- Employees Table
CREATE TABLE dbo.Staging_Employees (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT UNIQUE,
    LastName NVARCHAR(255),
    FirstName NVARCHAR(255),
    Title NVARCHAR(255),
    TitleOfCourtesy NVARCHAR(255),
    BirthDate DATETIME,
    HireDate DATETIME,
    [Address] NVARCHAR(255),
    City NVARCHAR(255),
    Region NVARCHAR(255),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(255),
    HomePhone NVARCHAR(255),
    Extension NVARCHAR(10),
    Notes NVARCHAR(MAX),
    ReportsTo INT,
    PhotoPath NVARCHAR(255),
    CONSTRAINT FK_Employees_ReportsTo FOREIGN KEY (ReportsTo) REFERENCES dbo.Staging_Employees(EmployeeID)
);

-- Staging Orders Table
CREATE TABLE dbo.Staging_Orders (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT UNIQUE,
    CustomerID NVARCHAR(5),
    EmployeeID INT,
    OrderDate DATETIME,
    RequiredDate DATETIME,
    ShippedDate DATETIME,
    ShipVia INT,
    Freight DECIMAL(10,2),
    ShipName NVARCHAR(255),
    ShipAddress NVARCHAR(255),
    ShipCity NVARCHAR(255),
    ShipRegion NVARCHAR(255),
    ShipPostalCode NVARCHAR(20),
    ShipCountry NVARCHAR(255),
    TerritoryID NVARCHAR(20),
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Staging_Customers(CustomerID),
    CONSTRAINT FK_Orders_Employees FOREIGN KEY (EmployeeID) REFERENCES dbo.Staging_Employees(EmployeeID),
    CONSTRAINT FK_Orders_ShipVia FOREIGN KEY (ShipVia) REFERENCES dbo.Staging_Shippers(ShipperID),
    CONSTRAINT FK_Orders_Territories FOREIGN KEY (TerritoryID) REFERENCES dbo.Staging_Territories(TerritoryID)
);

-- Products Table
CREATE TABLE dbo.Staging_Products (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    ProductID INT UNIQUE,
    ProductName NVARCHAR(255),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit NVARCHAR(255),
    UnitPrice DECIMAL(10,2),
    UnitsInStock SMALLINT,
    UnitsOnOrder SMALLINT,
    ReorderLevel SMALLINT,
    Discontinued BIT,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID) REFERENCES dbo.Staging_Categories(CategoryID),
    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (SupplierID) REFERENCES dbo.Staging_Suppliers(SupplierID)
);


-- Order Details Table
CREATE TABLE dbo.Staging_OrderDetails (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    UnitPrice DECIMAL(10,2),
    Quantity SMALLINT,
    Discount FLOAT,
    CONSTRAINT PK_Staging_OrderDetails UNIQUE (OrderID, ProductID),
    CONSTRAINT FK_OrderDetails_OrderID FOREIGN KEY (OrderID) REFERENCES dbo.Staging_Orders(OrderID),
    CONSTRAINT FK_OrderDetails_ProductID FOREIGN KEY (ProductID) REFERENCES dbo.Staging_Products(ProductID)
);

-- Region Table
CREATE TABLE dbo.Staging_Region (
    staging_raw_id INT IDENTITY(1,1) PRIMARY KEY,
    RegionID INT UNIQUE,
    RegionDescription NVARCHAR(255),
    RegionCategory NVARCHAR(255),
    RegionImportance NVARCHAR(255)
);
2025-05-18 00:16:28 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | SQL file executed successfully.
2025-05-18 00:16:29 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging_Categories: 8 inserted, 0 skipped
2025-05-18 00:16:30 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging_Customers: 91 inserted, 0 skipped
2025-05-18 00:16:30 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging_Suppliers: 29 inserted, 0 skipped
2025-05-18 00:16:30 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging_Employees: 9 inserted, 0 skipped
2025-05-18 00:16:30 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging_Products: 77 inserted, 0 skipped
2025-05-18 00:16:30 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging_Shippers: 3 inserted, 0 skipped
2025-05-18 00:16:31 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging_Territories: 53 inserted, 0 skipped
2025-05-18 00:16:36 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging_Orders: 830 inserted, 0 skipped
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging_OrderDetails: 2155 inserted, 0 skipped
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging_Region: 4 inserted, 0 skipped
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Staging load completed. Updating dimensions...
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Updated DimCategories_SCD1 successfully.
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to ORDER_DDS...
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:46 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TARGET.ValidTo = GETDATE(),
    TARGET.IsCurrent = 0
FROM dbo.DimCustomers_SCD2 TARGET
JOIN (
    SELECT 
        sc.*,
        sor.SORKey
    FROM dbo.Staging_Customers sc
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Customers'
       AND sor.TablePrimaryKeyColumn = 'CustomerID'
) AS SOURCE
ON SOURCE.CustomerID = TARGET.CustomerID_NK
WHERE TARGET.IsCurrent = 1 AND (
    ISNULL(TARGET.CompanyName, '')    <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.ContactName, '')    <> ISNULL(SOURCE.ContactName, '') OR
    ISNULL(TARGET.ContactTitle, '')   <> ISNULL(SOURCE.ContactTitle, '') OR
    ISNULL(TARGET.Address, '')        <> ISNULL(SOURCE.Address, '') OR
    ISNULL(TARGET.City, '')           <> ISNULL(SOURCE.City, '') OR
    ISNULL(TARGET.Region, '')         <> ISNULL(SOURCE.Region, '') OR
    ISNULL(TARGET.PostalCode, '')     <> ISNULL(SOURCE.PostalCode, '') OR
    ISNULL(TARGET.Country, '')        <> ISNULL(SOURCE.Country, '') OR
    ISNULL(TARGET.Phone, '')          <> ISNULL(SOURCE.Phone, '') OR
    ISNULL(TARGET.Fax, '')            <> ISNULL(SOURCE.Fax, '')
);


INSERT INTO dbo.DimCustomers_SCD2 (
    SORKey,
    CustomerID_DURABLE_SK,
    CustomerID_NK,
    CompanyName,
    ContactName,
    ContactTitle,
    [Address],
    City,
    Region,
    PostalCode,
    Country,
    Phone,
    Fax,
    ValidFrom,
    ValidTo,
    IsCurrent
)
SELECT 
    sor.SORKey,
    sc.CustomerID,  
    sc.CustomerID,
    sc.CompanyName,
    sc.ContactName,
    sc.ContactTitle,
    sc.Address,
    sc.City,
    sc.Region,
    sc.PostalCode,
    sc.Country,
    sc.Phone,
    sc.Fax,
    GETDATE() AS ValidFrom,
    NULL AS ValidTo,
    1 AS IsCurrent
FROM dbo.Staging_Customers sc
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Customers'
   AND sor.TablePrimaryKeyColumn = 'CustomerID'
LEFT JOIN dbo.DimCustomers_SCD2 tgt
    ON tgt.CustomerID_NK = sc.CustomerID AND tgt.IsCurrent = 1
WHERE tgt.CustomerID_NK IS NULL
   OR (
        ISNULL(tgt.CompanyName, '')    <> ISNULL(sc.CompanyName, '') OR
        ISNULL(tgt.ContactName, '')    <> ISNULL(sc.ContactName, '') OR
        ISNULL(tgt.ContactTitle, '')   <> ISNULL(sc.ContactTitle, '') OR
        ISNULL(tgt.Address, '')        <> ISNULL(sc.Address, '') OR
        ISNULL(tgt.City, '')           <> ISNULL(sc.City, '') OR
        ISNULL(tgt.Region, '')         <> ISNULL(sc.Region, '') OR
        ISNULL(tgt.PostalCode, '')     <> ISNULL(sc.PostalCode, '') OR
        ISNULL(tgt.Country, '')        <> ISNULL(sc.Country, '') OR
        ISNULL(tgt.Phone, '')          <> ISNULL(sc.Phone, '') OR
        ISNULL(tgt.Fax, '')            <> ISNULL(sc.Fax, '')
   );
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | SQL file executed successfully.
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to ORDER_DDS...
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:46 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
USE ORDER_DDS;

MERGE INTO dbo.DimEmployees_SCD1 AS TARGET
USING (
    SELECT 
        se.EmployeeID,
        se.LastName,
        se.FirstName,
        se.Title,
        se.TitleOfCourtesy,
        se.BirthDate,
        se.HireDate,
        se.Address,
        se.City,
        se.Region,
        se.PostalCode,
        se.Country,
        se.HomePhone,
        se.Extension,
        se.Notes,
        se.ReportsTo,
        se.PhotoPath,
        sor.SORKey
    FROM dbo.Staging_Employees se
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Employees'
        AND sor.TablePrimaryKeyColumn = 'EmployeeID'
) AS SOURCE
ON TARGET.EmployeeID_NK = SOURCE.EmployeeID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.LastName = SOURCE.LastName,
        TARGET.FirstName = SOURCE.FirstName,
        TARGET.Title = SOURCE.Title,
        TARGET.TitleOfCourtesy = SOURCE.TitleOfCourtesy,
        TARGET.BirthDate = SOURCE.BirthDate,
        TARGET.HireDate = SOURCE.HireDate,
        TARGET.Address = SOURCE.Address,
        TARGET.City = SOURCE.City,
        TARGET.Region = SOURCE.Region,
        TARGET.PostalCode = SOURCE.PostalCode,
        TARGET.Country = SOURCE.Country,
        TARGET.HomePhone = SOURCE.HomePhone,
        TARGET.Extension = SOURCE.Extension,
        TARGET.Notes = SOURCE.Notes,
        TARGET.ReportsTo = SOURCE.ReportsTo,
        TARGET.PhotoPath = SOURCE.PhotoPath,
        TARGET.IsDeleted = 0,
        TARGET.ValidFrom = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        EmployeeID_NK,
        LastName,
        FirstName,
        Title,
        TitleOfCourtesy,
        BirthDate,
        HireDate,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        HomePhone,
        Extension,
        Notes,
        ReportsTo,
        PhotoPath,
        IsDeleted,
        ValidFrom
    )
    VALUES (
        SOURCE.EmployeeID,
        SOURCE.LastName,
        SOURCE.FirstName,
        SOURCE.Title,
        SOURCE.TitleOfCourtesy,
        SOURCE.BirthDate,
        SOURCE.HireDate,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.HomePhone,
        SOURCE.Extension,
        SOURCE.Notes,
        SOURCE.ReportsTo,
        SOURCE.PhotoPath,
        0,
        GETDATE()
    );

-- Soft-delete logic
UPDATE TARGET
SET IsDeleted = 1,
    ValidFrom = GETDATE()
FROM dbo.DimEmployees_SCD1 TARGET
LEFT JOIN dbo.Staging_Employees se
    ON TARGET.EmployeeID_NK = se.EmployeeID
WHERE se.EmployeeID IS NULL
  AND TARGET.IsDeleted = 0;
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | SQL file executed successfully.
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to ORDER_DDS...
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:46 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimSuppliers_SCD4 AS TARGET
USING (
    SELECT 
        ss.staging_raw_id,
        ss.SupplierID,
        ss.CompanyName,
        ss.ContactName,
        ss.ContactTitle,
        ss.Address,
        ss.City,
        ss.Region,
        ss.PostalCode,
        ss.Country,
        ss.Phone,
        ss.Fax,
        ss.HomePage,
        sor.SORKey
    FROM dbo.Staging_Suppliers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Suppliers'
       AND sor.TablePrimaryKeyColumn = 'SupplierID'
) AS SOURCE
ON TARGET.SupplierID_NK = SOURCE.SupplierID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.CompanyName   = SOURCE.CompanyName,
        TARGET.ContactName   = SOURCE.ContactName,
        TARGET.ContactTitle  = SOURCE.ContactTitle,
        TARGET.Address       = SOURCE.Address,
        TARGET.City          = SOURCE.City,
        TARGET.Region        = SOURCE.Region,
        TARGET.PostalCode    = SOURCE.PostalCode,
        TARGET.Country       = SOURCE.Country,
        TARGET.Phone         = SOURCE.Phone,
        TARGET.Fax           = SOURCE.Fax,
        TARGET.HomePage      = SOURCE.HomePage,
        TARGET.LastUpdated   = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        SupplierID_NK,
        CompanyName,
        ContactName,
        ContactTitle,
        Address,
        City,
        Region,
        PostalCode,
        Country,
        Phone,
        Fax,
        HomePage,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.SupplierID,
        SOURCE.CompanyName,
        SOURCE.ContactName,
        SOURCE.ContactTitle,
        SOURCE.Address,
        SOURCE.City,
        SOURCE.Region,
        SOURCE.PostalCode,
        SOURCE.Country,
        SOURCE.Phone,
        SOURCE.Fax,
        SOURCE.HomePage,
        GETDATE()
    );
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | SQL file executed successfully.
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to ORDER_DDS...
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:46 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
USE ORDER_DDS;


INSERT INTO dbo.DimProducts_History (
    SORKey,
    ProductID_SK_FK,            -- ✅ Correct foreign key
    ProductID_DURABLE_SK,
    ProductName,
    SupplierID,
    CategoryID,
    QuantityPerUnit,
    UnitPrice,
    UnitsInStock,
    UnitsOnOrder,
    ReorderLevel,
    Discontinued,
    ValidFrom,
    EndDate
)
SELECT
    dp.SORKey,
    dp.ProductID_SK_PK,        -- ✅ Get the surrogate key
    dp.ProductID_DURABLE_SK,
    dp.ProductName,
    dp.SupplierID,
    dp.CategoryID,
    dp.QuantityPerUnit,
    dp.UnitPrice,
    dp.UnitsInStock,
    dp.UnitsOnOrder,
    dp.ReorderLevel,
    dp.Discontinued,
    dp.LastUpdated,
    GETDATE() AS EndDate
FROM dbo.DimProducts_SCD4 dp
JOIN dbo.Staging_Products sp
    ON dp.ProductID_NK = sp.ProductID
WHERE
    ISNULL(dp.ProductName, '')         <> ISNULL(sp.ProductName, '') OR
    ISNULL(dp.SupplierID, -1)          <> ISNULL(sp.SupplierID, -1) OR
    ISNULL(dp.CategoryID, -1)          <> ISNULL(sp.CategoryID, -1) OR
    ISNULL(dp.QuantityPerUnit, '')     <> ISNULL(sp.QuantityPerUnit, '') OR
    ISNULL(dp.UnitPrice, 0.0)          <> ISNULL(sp.UnitPrice, 0.0) OR
    ISNULL(dp.UnitsInStock, 0)         <> ISNULL(sp.UnitsInStock, 0) OR
    ISNULL(dp.UnitsOnOrder, 0)         <> ISNULL(sp.UnitsOnOrder, 0) OR
    ISNULL(dp.ReorderLevel, 0)         <> ISNULL(sp.ReorderLevel, 0) OR
    ISNULL(dp.Discontinued, 0)         <> ISNULL(sp.Discontinued, 0);



MERGE INTO dbo.DimProducts_SCD4 AS TARGET
USING (
    SELECT 
        sp.staging_raw_id,
        sp.ProductID,
        sp.ProductName,
        sp.SupplierID,
        sp.CategoryID,
        sp.QuantityPerUnit,
        sp.UnitPrice,
        sp.UnitsInStock,
        sp.UnitsOnOrder,
        sp.ReorderLevel,
        sp.Discontinued,
        sor.SORKey
    FROM dbo.Staging_Products sp
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Products'
       AND sor.TablePrimaryKeyColumn = 'ProductID'
) AS SOURCE
ON TARGET.ProductID_NK = SOURCE.ProductID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.ProductID_DURABLE_SK = CAST(SOURCE.ProductID AS NVARCHAR(10)),
        TARGET.ProductName = SOURCE.ProductName,
        TARGET.SupplierID = SOURCE.SupplierID,
        TARGET.CategoryID = SOURCE.CategoryID,
        TARGET.QuantityPerUnit = SOURCE.QuantityPerUnit,
        TARGET.UnitPrice = SOURCE.UnitPrice,
        TARGET.UnitsInStock = SOURCE.UnitsInStock,
        TARGET.UnitsOnOrder = SOURCE.UnitsOnOrder,
        TARGET.ReorderLevel = SOURCE.ReorderLevel,
        TARGET.Discontinued = SOURCE.Discontinued,
        TARGET.LastUpdated = GETDATE()
WHEN NOT MATCHED THEN
    INSERT (
        SORKey,
        ProductID_NK,
        ProductID_DURABLE_SK,
        ProductName,
        SupplierID,
        CategoryID,
        QuantityPerUnit,
        UnitPrice,
        UnitsInStock,
        UnitsOnOrder,
        ReorderLevel,
        Discontinued,
        LastUpdated
    )
    VALUES (
        SOURCE.SORKey,
        SOURCE.ProductID,
        CAST(SOURCE.ProductID AS NVARCHAR(10)),
        SOURCE.ProductName,
        SOURCE.SupplierID,
        SOURCE.CategoryID,
        SOURCE.QuantityPerUnit,
        SOURCE.UnitPrice,
        SOURCE.UnitsInStock,
        SOURCE.UnitsOnOrder,
        SOURCE.ReorderLevel,
        SOURCE.Discontinued,
        GETDATE()
    );
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | SQL file executed successfully.
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to ORDER_DDS...
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:46 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
USE ORDER_DDS;


MERGE INTO dbo.DimRegion_SCD1 AS TARGET
USING (
    SELECT 
        sr.staging_raw_id,
        sr.RegionID,
        sr.RegionDescription,
        sr.RegionCategory,
        sr.RegionImportance,
        sor.SORKey
    FROM dbo.Staging_Region sr
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Region'
       AND sor.TablePrimaryKeyColumn = 'RegionID'
) AS SOURCE
ON TARGET.RegionID_NK = SOURCE.RegionID
WHEN MATCHED THEN
    UPDATE SET
        TARGET.RegionDescription = SOURCE.RegionDescription,
        TARGET.RegionCategory = SOURCE.RegionCategory,
        TARGET.RegionImportance = SOURCE.RegionImportance
WHEN NOT MATCHED THEN
    INSERT (
        RegionID_NK,
        RegionDescription,
        RegionCategory,
        RegionImportance
    )
    VALUES (
        SOURCE.RegionID,
        SOURCE.RegionDescription,
        SOURCE.RegionCategory,
        SOURCE.RegionImportance
    );
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | SQL file executed successfully.
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to ORDER_DDS...
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:46 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
USE ORDER_DDS;



UPDATE TARGET
SET
    CompanyName_Prior = CompanyName_Current,
    Phone_Prior = Phone_Current,
    CompanyName_Current = SOURCE.CompanyName,
    Phone_Current = SOURCE.Phone,
    LastUpdated = GETDATE()
FROM dbo.DimShippers_SCD3 TARGET
JOIN (
    SELECT 
        ss.staging_raw_id,
        ss.ShipperID,
        ss.CompanyName,
        ss.Phone,
        sor.SORKey
    FROM dbo.Staging_Shippers ss
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Shippers'
       AND sor.TablePrimaryKeyColumn = 'ShipperID'
) AS SOURCE
ON TARGET.ShipperID_NK = SOURCE.ShipperID
WHERE
    ISNULL(TARGET.CompanyName_Current, '') <> ISNULL(SOURCE.CompanyName, '') OR
    ISNULL(TARGET.Phone_Current, '')       <> ISNULL(SOURCE.Phone, '');



INSERT INTO dbo.DimShippers_SCD3 (
    ShipperID_NK,
    CompanyName_Current,
    Phone_Current,
    CompanyName_Prior,
    Phone_Prior,
    LastUpdated
)
SELECT 
    ss.ShipperID,
    ss.CompanyName,
    ss.Phone,
    NULL, 
    NULL,
    GETDATE()
FROM dbo.Staging_Shippers ss
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Shippers'
   AND sor.TablePrimaryKeyColumn = 'ShipperID'
LEFT JOIN dbo.DimShippers_SCD3 ds
    ON ds.ShipperID_NK = ss.ShipperID
WHERE ds.ShipperID_NK IS NULL;
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | SQL file executed successfully.
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to ORDER_DDS...
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:46 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
USE ORDER_DDS;


UPDATE TARGET
SET 
    TerritoryDescription_Prior = TerritoryDescription_Current,
    RegionID_Prior = RegionID_Current,
    TerritoryDescription_Current = SOURCE.TerritoryDescription,
    RegionID_Current = SOURCE.RegionID,
    LastUpdated = GETDATE()
FROM dbo.DimTerritories_SCD3 TARGET
JOIN (
    SELECT 
        st.staging_raw_id,
        st.TerritoryID,
        st.TerritoryDescription,
        st.RegionID,
        sor.SORKey
    FROM dbo.Staging_Territories st
    JOIN dbo.Dim_SOR sor
        ON sor.StagingTableName = 'Staging_Territories'
       AND sor.TablePrimaryKeyColumn = 'TerritoryID'
) AS SOURCE
ON TARGET.TerritoryID_NK = SOURCE.TerritoryID
WHERE 
    ISNULL(TARGET.TerritoryDescription_Current, '') <> ISNULL(SOURCE.TerritoryDescription, '') OR
    ISNULL(TARGET.RegionID_Current, -1)             <> ISNULL(SOURCE.RegionID, -1);



INSERT INTO dbo.DimTerritories_SCD3 (
    TerritoryID_NK,
    TerritoryDescription_Current,
    RegionID_Current,
    TerritoryDescription_Prior,
    RegionID_Prior,
    LastUpdated
)
SELECT 
    st.TerritoryID,
    st.TerritoryDescription,
    st.RegionID,
    NULL,
    NULL,
    GETDATE()
FROM dbo.Staging_Territories st
JOIN dbo.Dim_SOR sor
    ON sor.StagingTableName = 'Staging_Territories'
   AND sor.TablePrimaryKeyColumn = 'TerritoryID'
LEFT JOIN dbo.DimTerritories_SCD3 dt
    ON dt.TerritoryID_NK = st.TerritoryID
WHERE dt.TerritoryID_NK IS NULL;
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | SQL file executed successfully.
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Dimension updates complete. Updating fact table...
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Connecting to ORDER_DDS...
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing SQL batches...
2025-05-18 00:16:46 | DEBUG | 16677b06-7c79-4935-8902-5f3e7348f68d | Executing batch:
DECLARE @DatabaseName NVARCHAR(128) = 'ORDER_DDS';
DECLARE @SchemaName NVARCHAR(128) = 'dbo';
DECLARE @TableName NVARCHAR(128) = 'FactOrders';
DECLARE @start_date DATE = '2020-01-01';
DECLARE @end_date DATE = '2025-12-31';

USE [ORDER_DDS];


-- INSERT INTO dbo.FactOrders (
--     OrderID_FK,
--     ProductID_FK,
--     CustomerID_FK,
--     EmployeeID_FK,
--     ShipperID_FK,
--     OrderDate,
--     RequiredDate,
--     ShippedDate,
--     Freight,
--     Quantity,
--     UnitPrice,
--     Discount
-- )
-- SELECT
--     so.OrderID,
--     dp.ProductID_SK_PK,
--     dc.CustomerID_SK_PK,
--     de.EmployeeID_SK_PK,
--     ds.ShipperID_SK_PK,
--     so.OrderDate,
--     so.RequiredDate,
--     so.ShippedDate,
--     so.Freight,
--     sod.Quantity,
--     sod.UnitPrice,
--     sod.Discount
-- FROM dbo.Staging_Orders AS so
-- JOIN dbo.Staging_OrderDetails AS sod
--     ON so.OrderID = sod.OrderID
-- JOIN dbo.DimCustomers_SCD2 AS dc
--     ON dc.CustomerID_NK = so.CustomerID
--     AND dc.IsCurrent = 1
-- JOIN dbo.DimEmployees_SCD1 AS de
--     ON de.EmployeeID_NK = so.EmployeeID
-- JOIN dbo.DimShippers_SCD3 AS ds
--     ON ds.ShipperID_NK = so.ShipVia
-- JOIN dbo.DimProducts_SCD4 AS dp
--     ON dp.ProductID_NK = sod.ProductID
-- WHERE so.OrderDate BETWEEN @start_date AND @end_date;


TRUNCATE TABLE dbo.FactOrders;

INSERT INTO dbo.FactOrders (
    OrderID_FK,
    ProductID_FK,
    CustomerID_FK,
    EmployeeID_FK,
    ShipperID_FK,
    OrderDate,
    RequiredDate,
    ShippedDate,
    Freight,
    Quantity,
    UnitPrice,
    Discount
)
SELECT
    so.OrderID,
    dp.ProductID_SK_PK,
    dc.CustomerID_SK_PK,
    de.EmployeeID_SK_PK,
    ds.ShipperID_SK_PK,
    so.OrderDate,
    so.RequiredDate,
    so.ShippedDate,
    so.Freight,
    sod.Quantity,
    sod.UnitPrice,
    sod.Discount
FROM dbo.Staging_Orders AS so
JOIN dbo.Staging_OrderDetails AS sod
    ON so.OrderID = sod.OrderID
JOIN dbo.DimCustomers_SCD2 AS dc
    ON dc.CustomerID_NK = so.CustomerID AND dc.IsCurrent = 1
JOIN dbo.DimEmployees_SCD1 AS de
    ON de.EmployeeID_NK = so.EmployeeID
JOIN dbo.DimShippers_SCD3 AS ds
    ON ds.ShipperID_NK = so.ShipVia
JOIN dbo.DimProducts_SCD4 AS dp
    ON dp.ProductID_NK = sod.ProductID;
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | SQL file executed successfully.
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | FactOrders snapshot fact table populated successfully.
2025-05-18 00:16:46 | INFO | 16677b06-7c79-4935-8902-5f3e7348f68d | ETL pipeline completed.
